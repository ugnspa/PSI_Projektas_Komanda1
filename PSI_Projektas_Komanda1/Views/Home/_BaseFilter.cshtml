@model List<Item>
@{
    var displayClass = !Model.Any() ? "d-none" : "";
}
<head>
    <link rel="stylesheet" href="~/css/filter.css" asp-append-version="true" />
</head>
@*@using (Html.BeginForm("FilterStore", "Home", FormMethod.Post, new { id = "filterForm" }))
{*@

    <div class="filter-container @displayClass" >
        <div class="main-content @displayClass">
        <button class="btn btn-primary" onclick="location.href='@Url.Action("ClearFilter", "Home")'">Clear Filter</button><br>


@*<div class="container" style="flex: 1; position: absolute; top: 20%; left: 1%; transform: translateY(-50%, -50%) overflow-y: auto;">
    <button class="btn btn-primary" onclick="location.href='@Url.Action("ClearFilter", "Home")'">Clear Filter</button><br>*@

    <br>
    <form method="post" action="@Url.Action("FilterStore", "Home")">
        


        
        @{
            //ViewBag.Computers = Model.ToList();
        }
        @if (Model is List<Item> items && items.Count > 0)
        {
            <label style="font-size: 18px; font-weight: bold;">Filter by Price</label>

            <br>
            @foreach (var mod in ViewBag.Prices)
            {
                <input type="checkbox" name="selectedPrices" value="@mod" id="@mod" class="brand-checkbox" ) />
                <label for="@mod">@mod</label>
                <br />
            }
            <br>

            <label style="font-size: 18px; font-weight: bold;">Filter by brand:</label>

            <br>

            @foreach (Item item in items)
            {
                <input type="hidden" name="BaseList" value="@item" />
            }

            @foreach (var brand in items.Select(c => c.Brand).Distinct())
            {
                <input type="checkbox" name="selectedBrands" value="@brand" id="@brand" class="brand-checkbox" />
                <label for="@brand">@brand</label>
                <br />
            }
            <br>
            <label style="font-size: 18px; font-weight: bold;">Filter by Model</label>

            <br>
            @foreach (var mod in items.Select(c => c.Model).Distinct())
            {
                <input type="checkbox" name="selectedModels" value="@mod" id="@mod" class="brand-checkbox" ) />
                <label for="@mod">@mod</label>
                <br />
            }
            <br>
            if (items.OfType<Computer>().Count() == items.Count)
            {
                <label style="font-size: 18px; font-weight: bold;">Filter by Processor</label>
                <br>
                @foreach (var mod in items.OfType<Computer>().Select(c => c.Processor).Distinct())
                {
                    <input type="checkbox" name="selectedProcessors" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>

                <label style="font-size: 18px; font-weight: bold;">Filter by GPU</label>
                <br>
                @foreach (var mod in items.OfType<Computer>().Select(c => c.GPU).Distinct())
                {
                    <input type="checkbox" name="selectedGPUs" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>

                <label style="font-size: 18px; font-weight: bold;">Filter by Motherboeard</label>
                <br>
                @foreach (var proc in items.OfType<Computer>().Select(c => c.Motherboard).Distinct())
                {
                    <input type="checkbox" name="selectedMotherBoard" value="@proc" id="@proc" class="brand-checkbox" ) />
                    <label for="@proc">@proc</label>
                    <br />
                }
                <br>
                <label style="font-size: 18px; font-weight: bold;">Filter by Ram</label>

                <br>
                @foreach (var proc in items.OfType<Computer>().Select(c => c.Ram).Distinct())
                {
                    <input type="checkbox" name="selectedRam" value="@proc" id="@proc" class="brand-checkbox" ) />
                    <label for="@proc">@proc GB</label>
                    <br />
                }
                <br>
                <label style="font-size: 18px; font-weight: bold;">Filter by Memory</label>
                <br>
                @foreach (var proc in items.OfType<Computer>().Select(c => c.Memory).Distinct())
                {
                    <input type="checkbox" name="selectedMemory" value="@proc" id="@proc" class="brand-checkbox" ) />
                    <label for="@proc">@proc GB</label>
                    <br />
                }
                <br>
                <label style="font-size: 18px; font-weight: bold;">Filter by Power Supply Wattage</label>
                <br>
                @foreach (var proc in items.OfType<Computer>().Select(c => c.PowerSupplyWattage).Distinct())
                {
                    <input type="checkbox" name="selectedWattage" value="@proc" id="@proc" class="brand-checkbox" ) />
                    <label for="@proc">@proc W</label>
                    <br />
                }
                <br>
            }
            else if (items.OfType<Camera>().Count() == items.Count)
            {
                <label style="font-size: 18px; font-weight: bold;">Filter by MegaPixels</label>
                @foreach (var mod in items.OfType<Camera>().Select(c => c.MegaPixels).Distinct())
                {
                    <input type="checkbox" name="selectedMegaPixels" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>


            }
            else if (items.OfType<Smartphone>().Count() == items.Count)
            {
                <label style="font-size: 18px; font-weight: bold;">Filter by Processor</label>
                <br>
                @foreach (var mod in items.OfType<Smartphone>().Select(c => c.Processor).Distinct())
                {
                    <input type="checkbox" name="selectedProcessors" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>

                <label style="font-size: 18px; font-weight: bold;">Filter by GPU</label>
                <br>
                @foreach (var mod in items.OfType<Smartphone>().Select(c => c.Processor).Distinct())
                {
                    <input type="checkbox" name="selectedGPUs" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>
                <label style="font-size: 18px; font-weight: bold;">Filter by Ram</label>
                <br>
                @foreach (var proc in items.OfType<Smartphone>().Select(c => c.Ram).Distinct())
                {
                    <input type="checkbox" name="selectedRam" value="@proc" id="@proc" class="brand-checkbox" ) />
                    <label for="@proc">@proc GB</label>
                    <br />
                }
                <br>
                <label style="font-size: 18px; font-weight: bold;">Filter by Memory</label>
                <br>
                @foreach (var proc in items.OfType<Smartphone>().Select(c => c.Memory).Distinct())
                {
                    <input type="checkbox" name="selectedMemory" value="@proc" id="@proc" class="brand-checkbox" ) />
                    <label for="@proc">@proc GB</label>
                    <br />
                }


            }
            else if (items.OfType<AirConditioner>().Count() == items.Count)
            {
                <label style="font-size: 18px; font-weight: bold;">Filter by MaxArea</label>
                @foreach (var mod in items.OfType<AirConditioner>().Select(c => c.MaxArea).Distinct())
                {
                    <input type="checkbox" name="selectedMaxArea" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>

                <label style="font-size: 18px; font-weight: bold;">Filter by MaxTemp</label>
                @foreach (var mod in items.OfType<AirConditioner>().Select(c => c.MaxTemp).Distinct())
                {
                    <input type="checkbox" name="selectedMaxTemp" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>

                <label style="font-size: 18px; font-weight: bold;">Filter by MinTemp</label>
                @foreach (var mod in items.OfType<AirConditioner>().Select(c => c.MinTemp).Distinct())
                {
                    <input type="checkbox" name="selectedMinTemp" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>
            }
            else if (items.OfType<Dishwasher>().Count() == items.Count)
            {
                <label style="font-size: 18px; font-weight: bold;">Filter by Volume</label>
                @foreach (var mod in items.OfType<Dishwasher>().Select(c => c.Volume).Distinct())
                {
                    <input type="checkbox" name="selectedVolume" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>
            }
            else if (items.OfType<Dryer>().Count() == items.Count)
            {
                <label style="font-size: 18px; font-weight: bold;">Filter by Volume</label>
                @foreach (var mod in items.OfType<Dryer>().Select(c => c.Volume).Distinct())
                {
                    <input type="checkbox" name="selectedVolume" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>
            }
            else if (items.OfType<Dishwasher>().Count() == items.Count)
            {
                <label style="font-size: 18px; font-weight: bold;">Filter by Volume</label>
                @foreach (var mod in items.OfType<Dishwasher>().Select(c => c.Volume).Distinct())
                {
                    <input type="checkbox" name="selectedVolume" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>
            }
            else if (items.OfType<Fridge>().Count() == items.Count)
            {
                <label style="font-size: 18px; font-weight: bold;">Filter by Volume</label>
                @foreach (var mod in items.OfType<Fridge>().Select(c => c.Volume).Distinct())
                {
                    <input type="checkbox" name="selectedVolume" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>

                <label style="font-size: 18px; font-weight: bold;">Has Freezer</label>
                @foreach (var mod in items.OfType<Fridge>().Select(c => c.Volume).Distinct())
                {
                    <input type="checkbox" name="selectedFreezer" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>
            }
            else if (items.OfType<HeatingSystem>().Count() == items.Count)
            {
                <label style="font-size: 18px; font-weight: bold;">Filter by MaxArea</label>
                @foreach (var mod in items.OfType<HeatingSystem>().Select(c => c.MaxArea).Distinct())
                {
                    <input type="checkbox" name="selectedMaxArea" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>
            }
            else if (items.OfType<Microwave>().Count() == items.Count)
            {
                <label style="font-size: 18px; font-weight: bold;">Filter by Volume</label>
                    <br>
                @foreach (var mod in items.OfType<Microwave>().Select(c => c.Volume).Distinct())
                {
                    <input type="checkbox" name="selectedVolume" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>
            }
            else if (items.OfType<Oven>().Count() == items.Count)
            {
                <label style="font-size: 18px; font-weight: bold;">Filter by Volume</label>
                @foreach (var mod in items.OfType<Oven>().Select(c => c.Volume).Distinct())
                {
                    <input type="checkbox" name="selectedVolume" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>

                <label style="font-size: 18px; font-weight: bold;">Filter by Type</label>
                @foreach (var mod in items.OfType<Oven>().Select(c => c.Type).Distinct())
                {
                    <input type="checkbox" name="selectedType" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>
            }
            else if (items.OfType<TV>().Count() == items.Count)
            {
                <label style="font-size: 18px; font-weight: bold;">Filter by Diagonal</label>
                @foreach (var mod in items.OfType<TV>().Select(c => c.Diagonal).Distinct())
                {
                    <input type="checkbox" name="selectedDiagonal" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>
            }
            else if (items.OfType<Vacuum>().Count() == items.Count)
            {
                <label style="font-size: 18px; font-weight: bold;">Filter by Volume</label>
                @foreach (var mod in items.OfType<Vacuum>().Select(c => c.Volume).Distinct())
                {
                    <input type="checkbox" name="selectedVolume" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>
            }
            else if (items.OfType<WashingMashine>().Count() == items.Count)
            {
                <label style="font-size: 18px; font-weight: bold;">Filter by Volume</label>
                @foreach (var mod in items.OfType<WashingMashine>().Select(c => c.Volume).Distinct())
                {
                    <input type="checkbox" name="selectedVolume" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>
            }
            else if (items.OfType<Watch>().Count() == items.Count)
            {
                <label style="font-size: 18px; font-weight: bold;">Filter by Days Charged</label>
                @foreach (var mod in items.OfType<Watch>().Select(c => c.DaysCharged).Distinct())
                {
                    <input type="checkbox" name="selectedDaysCharged" value="@mod" id="@mod" class="brand-checkbox" ) />
                    <label for="@mod">@mod</label>
                    <br />
                }
                <br>
            }
        }
        <br>

        <br />
        <button class="btn btn-primary" type="submit" id="filterButton">Filter</button>
    </form>
    </div>
</div>
@*}*@

<script>
    $(document).ready(function () {
        // Submit form when filter button is clicked
        $("#filterButton").on("click", function () {
            $("#filterForm").submit();
        });
    });
</script>